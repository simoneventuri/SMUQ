node {

    properties([
      [$class: 'EnvInjectJobProperty', info: [loadFilesFromMaster: false, propertiesFilePath: 'ListEnvVariables', secureGroovyScript: [classpath: [], sandbox: false, script: '']], keepBuildVariables: true, keepJenkinsSystemVariables: true, on: true],
      buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')),
      parameters([
        choice(name: 'build_type', choices: 'Release\nDebug', description: 'Specify the type of build to build the code'),
//        choice(name: 'git_branch', choices: 'master\nexperimental\ndevelop', description: 'Specify the branch to be build'),
        booleanParam(name: 'run_tests', defaultValue: false, description: 'Specify is tests need to be run'),
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Specify the Fortran compiler.',
            filterLength: 1,
            filterable: false,
            name: 'compiler',
            script: [$class: 'GroovyScript',
                fallbackScript: [classpath: [], sandbox: false, script: 'return [\'error\']'],
                script: [classpath: [], sandbox: false, script: 'return["intel","gcc"]']
            ]
        ],
//
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Specify the Fortran compiler version.',
            filterLength: 1,
            filterable: false,
            name: 'compiler_version',
            randomName: 'choice-parameter-2107413379240858',
            referencedParameters: 'compiler',
            script: [$class: 'GroovyScript',
                fallbackScript: [classpath: [], sandbox: false, script: 'return ["error"]'],
                script: [classpath: [], sandbox: false, script: '''if (compiler.equals("intel")) {
  return ["18.0.0"]
} else if (compiler.equals("gcc")) {
  return ["5.3.0", "7.3.0"]
} else {
  return ["Unknown compiler version"]
}'''
                ]
            ]
        ]
      ])  // parameters
    ])    // properties










    stage('Definition') {
        echo 'Definition'

        env.CodeName              = "$JOB_NAME".tokenize("/")[0].toLowerCase()
        env.InstallScript         = "${CodeName}-install"
        env.ScriptDirectory       = "${env.WORKSPACE}/${CodeName}/scripts/Installation"
        env.compiler_modulefile   = "${env.compiler}/${env.compiler_version}"
//         env.build_type  = "Debug"
//         env.git_branch  = "master"
//         env.compiler    = "intel"

//        echo "-> env.git_branch             ${env.git_branch}"
        echo "-> env.compiler               ${env.compiler}"
        echo "-> env.compiler_version       ${env.compiler_version}"
        echo "-> env.compiler_modulefile    ${env.compiler_modulefile}"

        echo 'User variables'
        echo "-> CodeName                    ${env.CodeName}"
        echo "-> InstallScript               ${env.InstallScript}"
        echo "-> ScriptDirectory             ${env.ScriptDirectory}"
//         echo "-> BUILD_TYPE                  ${env.BUILD_TYPE}"
//         echo "-> FORTRAN_COMPILER            ${env.FORTRAN_COMPILER}"
//         echo "-> BUILD_TESTS                 ${env.BUILD_TESTS}"
//         echo "-> ModuleDirectory         ${env.ModuleDirectory}"

        echo 'Jenkins variables'
        echo "-> BUILD_NUMBER                ${env.BUILD_NUMBER}"
        echo "-> BUILD_ID                    ${env.BUILD_ID}"
        echo "-> BUILD_DISPLAY_NAME          ${env.BUILD_DISPLAY_NAME}"
        echo "-> JOB_NAME                    ${env.JOB_NAME}"
        echo "-> BUILD_TAG                   ${env.BUILD_TAG}"
        echo "-> EXECUTOR_NUMBER             ${env.EXECUTOR_NUMBER}"
        echo "-> NODE_NAME                   ${env.NODE_NAME}"
        echo "-> NODE_LABELS                 ${env.NODE_LABELS}"
        echo "-> WORKSPACE                   ${env.WORKSPACE}"
        echo "-> JENKINS_HOME                ${env.JENKINS_HOME}"
        echo "-> JENKINS_URL                 ${env.JENKINS_URL}"
        echo "-> BUILD_URL                   ${env.BUILD_URL}"
        echo "-> JOB_URL                     ${env.JOB_URL}"

//         echo "-> BRANCH_NAME                 ${env.BRANCH_NAME}"
//         echo "-> CHANGE_ID                   ${env.CHANGE_ID}"
//         echo "-> CHANGE_URL                  ${env.CHANGE_URL}"
//         echo "-> CHANGE_TITLE                ${env.CHANGE_TITLE}"
//         echo "-> CHANGE_AUTHOR               ${env.CHANGE_AUTHOR}"
//         echo "-> CHANGE_AUTHOR_DISPLAY_NAME  ${env.CHANGE_AUTHOR_DISPLAY_NAME}"
//         echo "-> CHANGE_AUTHOR_EMAIL         ${env.CHANGE_AUTHOR_EMAIL}"
//         echo "-> CHANGE_TARGET               ${env.CHANGE_TARGET}"
    }

    stage('checkout') {
        echo 'Checkout stage'
        dir("${CodeName}") {
            checkout scm
        }
    }

    stage('Build') {
        echo 'Build stage'
//         sh 'printenv'
        sh '''
          module() {
            eval `/usr/local/Modules/3.2.10/bin/modulecmd bash $*`
          }
          module unuse /home/libo/LIBRARIES/modules/Modules/
          module use --append /home/libo/MODULES/APPLICATIONS
          module use --append /home/libo/MODULES/LIBRARIES
          module use --append /home/libo/MODULES/CFD
          module avail
          module load cmake/3.10.2
          #module load intel/18.0.0
          module load $compiler_modulefile
          #module load pfunit/3.1.1-release-intel-18.0.0
          module list

          cp ${ScriptDirectory}/${InstallScript} .

          source ./${InstallScript} \
            -u=${build_type}  \
            -f=${FC} \
            -t

          echo "-> NameVersionConfig    ${NameVersionConfig}"
          echo "-> BuildDirectory    ${BuildDirectory}"

          rm -f ListEnvVariables.groovy
          echo "env.BuildDirectory=\\"${BuildDirectory}\\""           >> ListEnvVariables.groovy
          echo "env.NameVersionConfig=\\"${NameVersionConfig}\\""     >> ListEnvVariables.groovy
          echo "env.ModuleFileInstallationDirectory=\\"${ModuleFileInstallationDirectory}\\""     >> ListEnvVariables.groovy
        '''
    }

//    stage('Install') {
//        echo 'Install stage'
//     }

    stage('Unit Tests') {
        echo 'Unit Tests stage'
        load "ListEnvVariables.groovy"
        echo "env.BuildDirectory        ${env.BuildDirectory}"


        sh '''
            cd ${BuildDirectory}
            ctest
        '''
    }

   stage('Regression Tests') {
       echo 'Regression Tests stage'
    }

}
